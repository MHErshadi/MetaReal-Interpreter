a = []
c = 0

#* Test1 <none> type *#

if +none is int && +none == 0
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test2 <object> type *#

if +object() is int
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test3 <int> type *#

if +55 is int && +55 == 55
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test4 <float> type *#

if +7.3 is float && +7.3 == 7.3
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test5 <complex> type *#

if +(9 + 6i) is complex && +(9 + 6i) == (9 + 6i)
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test6 <bool> type *#

if +true is int && +true == 1
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test7 <char> type *#

if +'U' is int && +'U' is 85
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test8 <str> type *#

if +"Hello" is int && +"Hello" == 5
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test9 <list> type *#

if +[1, 2, 3] is int && +[1, 2, 3] == 3
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test10 <tuple> type *#

if +(1, 2, 3, 4) is int && +(1, 2, 3, 4) == 4
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test11 <type> type *#

if +float is int && +float == 3
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test12 <func> type *#

func f(x): x

if +f is int
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test13 <struct> type *#

struct s
{
    x = 10
    y = 0
}

if +s is int
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Result *#

if c == 13:
    "PASSED"
else:
    "       FAILED"
