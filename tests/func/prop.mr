a = []
c = 0

#* Test1 *#

func int f(x):
    return x

try
{
    f("")
    a += "FAILED"
}
except "Return value must be int (not <str>)"
{
    a += "PASSED"
    c++
}

#* Test2 *#

func int f(int x):
    return x

try
{
    f("")
    a += "FAILED"
}
except "Type of variable and type of value do not match (<int> and <str>)"
{
    a += "PASSED"
    c++
}

#* Test3 *#

func int f(int x = 100):
    return x

if f() === 100
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test4 *#

func list f(int x, int y, int z):
    return [x, 2 * y, 3 * z]

if f(5, 8, 11) === [5, 16, 33]
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test5 *#

func f(x, y = 10):
    return y ** x

if f(x: 3) === 1000
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test6 *#

if f(y: 3, x: 5) === 243
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test7 *#

func f(x = 10, y = 4):
    return x ** 2 * y

if f() === 400
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test8 *#

try
{
    f(1, 1, 1)
    a += "FAILED"
}
except "Invalid argument count for function 'f' (argument count is must be between 0 and 2 (inclusive), not 3)"
{
    a += "PASSED"
    c++
}

#* Result *#

if c === 8:
    "PASSED"
else:
    "       FAILED"
