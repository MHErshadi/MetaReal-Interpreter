r = []
c = 0

#* Test1 *#

if func() {} === none === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test2 *#

if func f(x) {x ** 3} === object() === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test3 *#

if func() {} === 0 === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test4 *#

if func() {} === 0.0 === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test5 *#

if func() {} === 0.0i === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test6 *#

if func() {} === false === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test7 *#

if func() {} === '\0' === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test8 *#

if func() {} === "" === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test9 *#

if func() {} === [] === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test10 *#

if func f(x) {x} === (f,) === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test11 *#

if func() {} === object === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test12 *#

if func f(r, t) {r / (r + t)} === f === true && func() {} === func() {} === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test13 *#

if func() {} === struct {} === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Result *#

if c === 13:
    "PASSED"
else:
    r
