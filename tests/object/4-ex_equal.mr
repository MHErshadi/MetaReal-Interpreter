r = []
c = 0

#* Test1 *#

if object() === none === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test2 *#

a = object()

if a === a === true && a === object() === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test3 *#

if object() === 1 === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test4 *#

if object() === 3.1 === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test5 *#

if object() === (1 + 5i) === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test6 *#

if object() === true === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test7 *#

if object() === 'o' === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test8 *#

if object() === "object" === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test9 *#

if object() === [1, 2, 3] === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test10 *#

if object() === (1, 2) === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test11 *#

if object() === object === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test12 *#

if object() === func(x) {x} === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Test13 *#

if object() === struct {x = 1; y = 0} === false
{
    r += "PASSED"
    c++
}
else:
    r += "FAILED"

#* Result *#

if c === 13:
    "PASSED"
else:
    r
