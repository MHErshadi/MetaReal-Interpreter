a = []
c = 0

#* Test1 <none> and <object> types *#

v = !none
w = not object()
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test2 <int> type *#

v = !0
w = not 5
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test3 <float> type *#

v = !0.0
w = not 1.3
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test4 <complex> type *#

v = !0i
w = not (5.6 + 6.5i)
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test5 <bool> type *#

v = !false
w = not true
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test6 <char> type *#

v = !'\0'
w = not '4'
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test7 <str> type *#

v = !""
w = not "OK"
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test8 <list> type *#

v = ![]
w = not [1, 2, 3]
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test9 <tuple> and <type> types *#

v = !(1, 2, 3)
w = not char
if (v, w) are bool && !v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test10 <func> type *#

f1 = func (x, y): x * y
func f2(x): x

v = !f1
w = not f2
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Test11 <struct> type *#

s1 = struct {x = 1}
struct s2
{
    x = 1
    y = 2
}

v = !s1
w = not s2
if (v, w) are bool && v && !w
{
    a += "PASSED"
    c++
}
else:
    a += "FAILED"

#* Result *#

if c == 11:
    "PASSED"
else:
    "       FAILED"
